name: Run Tests with Coverage and PR Comment

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened

jobs:
  pytest:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: uvlhub_root_password
          MYSQL_DATABASE: uvlhubdb_test
          MYSQL_USER: uvlhub_user
          MYSQL_PASSWORD: uvlhub_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Prepare environment
        run: |
          sed -i '/rosemary @ file:\/\/\/app/d' requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run Tests with Coverage
        env:
          FLASK_ENV: testing
          MARIADB_HOSTNAME: 127.0.0.1
          MARIADB_PORT: 3306
          MARIADB_TEST_DATABASE: uvlhubdb_test
          MARIADB_USER: uvlhub_user
          MARIADB_PASSWORD: uvlhub_password
        run: |
          pytest app/modules/ --cov=app/modules/auth --cov=app/modules/featuremodel --cov=app/modules/flamapy --cov=app/modules/hubfile --cov=app/modules/notepad --cov=app/modules/profile --cov=app/modules/webhook --cov-report=xml:coverage.xml --cov-report=term --ignore-glob='*selenium*'

      - name: Get Detailed Coverage Report
        id: coverage_report
        run: |
          # Parse coverage XML and generate a detailed report
          if [ -f coverage.xml ]; then
            coverage_report="## Test Coverage Report\n"
            while IFS= read -r line; do
              if [[ "$line" == *'<file'* ]]; then
                filename=$(echo "$line" | sed -n 's/.*name="\([^"]*\)".*/\1/p')
              elif [[ "$line" == *'<lines-valid'* ]]; then
                total_lines=$(echo "$line" | sed -n 's/.*lines-valid="\([0-9]*\)".*/\1/p')
              elif [[ "$line" == *'<lines-covered'* ]]; then
                lines_covered=$(echo "$line" | sed -n 's/.*lines-covered="\([0-9]*\)".*/\1/p')
                if [ -n "$total_lines" ] && [ -n "$lines_covered" ]; then
                  line_percentage=$(echo "scale=2; $lines_covered / $total_lines * 100" | bc)
                  coverage_report+="| $filename | $line_percentage% coverage |\n"
                fi
              fi
            done < coverage.xml
            echo "$coverage_report" > coverage_report.txt
          else
            echo "No coverage data found."
            echo "coverage_report=No coverage data available." >> $GITHUB_ENV
          fi
          echo "coverage_report=$(<coverage_report.txt)" >> $GITHUB_ENV

      - name: Prepare notification
        run: |
          # Prepare the coverage report for PR comment
          if [ -f coverage_report.txt ]; then
            coverage_report=$(cat coverage_report.txt)
          else
            coverage_report="No coverage data available."
          fi
          echo "coverage_report=$coverage_report" >> $GITHUB_ENV

      - name: Create GitHub comment with coverage report
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = "Test Coverage Report";

            // Read coverage report
            const coverageReport = process.env.coverage_report;

            // Format the report as markdown table
            const body = `
              ### Test Coverage Report:
              ${coverageReport}
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: body
            });
