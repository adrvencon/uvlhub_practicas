name: Run Tests with Coverage

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened

jobs:
  pytest:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: uvlhub_root_password
          MYSQL_DATABASE: uvlhubdb_test
          MYSQL_USER: uvlhub_user
          MYSQL_PASSWORD: uvlhub_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Prepare environment
        run: |
          sed -i '/rosemary @ file:\/\/\/app/d' requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests with Coverage
        env:
          FLASK_ENV: testing
          MARIADB_HOSTNAME: 127.0.0.1
          MARIADB_PORT: 3306
          MARIADB_TEST_DATABASE: uvlhubdb_test
          MARIADB_USER: uvlhub_user
          MARIADB_PASSWORD: uvlhub_password
        run: |
          pytest app/modules/ --cov=app/modules/ --cov-report=xml:coverage.xml --ignore-glob='*selenium*'

      - name: Get Coverage Percentage
        id: coverage
        run: |
          cat coverage.xml
          coverage=$(python -c 'import xml.etree.ElementTree as ET
          tree = ET.parse("coverage.xml")
          root = tree.getroot()
          coverage = []
          exclude_files = {"locustfile.py", "seeders.py"}
          for package in root.findall(".//package"):
              package_name = package.get("name")
              coverage.append(f"**{package_name}**")
              for class_elem in package.findall(".//class"):
                  class_name = class_elem.get("name")
                  line_rate = class_elem.get("line-rate")
                  if class_name not in exclude_files and line_rate:
                      coverage.append(f"{class_name}_{line_rate}")
          print(",".join(coverage))
          ')
          echo "coverage=$coverage" >> $GITHUB_ENV

      - name: Parse Coverage and Format for Comment
        id: parse-coverage
        run: |
          IFS=',' read -r -a coverage_array <<< "${{ env.coverage }}"
          formatted_coverage=""
          current_category=""
          for coverage_pair in "${coverage_array[@]}"; do
            if [[ -n "$coverage_pair" && "$coverage_pair" =~ ^\*\*([a-zA-Z0-9_-]+)\*\*$ ]]; then
              current_category="${BASH_REMATCH[1]}"
              formatted_coverage+="\n### **$current_category**\n"
            elif [[ -n "$coverage_pair" && "$coverage_pair" =~ ^[a-zA-Z0-9_.-]+_[0-9.]+$ ]]; then
              IFS='_' read -r file coverage <<< "$coverage_pair"
              if [[ -n "$file" && -n "$coverage" && "$coverage" =~ ^[0-9.]+$ ]]; then
                percentage_coverage=$(echo "scale=2; $coverage * 100" | bc)
                formatted_coverage+="  **$file**: $percentage_coverage%\n"
              fi
            fi
          done
          
          echo "formatted_coverage<<EOF" >> $GITHUB_ENV
          echo -e "$formatted_coverage" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Comment on PR with Coverage Report
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Test Coverage Report
            ${{ env.formatted_coverage }}